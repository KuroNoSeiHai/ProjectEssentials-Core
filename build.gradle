buildscript {
    repositories {
        maven { url "https://files.minecraftforge.net/maven" }
        maven { url "https://libraries.minecraft.net" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: forge_gradle_version, changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

plugins {
    id "maven-publish"
    id "java-library"
    id "maven"
}

apply plugin: "org.jetbrains.dokka"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "kotlin"
apply plugin: "kotlinx-serialization"

version = module_version as Object
group = "com.mairwunnx.$module_id"
archivesBaseName = module_name

configurations {
    internal
    implementation.extendsFrom internal
}

minecraft {
    accessTransformer = file 'src/main/resources/META-INF/accesstransformer.cfg'
    mappings channel: forge_mappings_channel_type, version: forge_mappings_channel_version

    runs {
        client {
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            mods { ProjectEssentialsCore { source sourceSets.main } }
            workingDirectory project.file(dev_run_client_path as Object)
        }
        server {
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            mods { ProjectEssentialsCore { source sourceSets.main } }
            workingDirectory project.file(dev_run_server_path as Object)
        }
    }
}

repositories {
    maven {
        name = "GitHubPackages"
        url = uri "https://maven.pkg.github.com/projectessentials/projectessentials-permissions"
        credentials {
            username = "MairwunNx@gmail.com"
            password = package_public_token
        }
    }
    maven {
        name = "GitHubPackages"
        url = uri "https://maven.pkg.github.com/projectessentials/projectessentials-cooldown"
        credentials {
            username = "MairwunNx@gmail.com"
            password = package_public_token
        }
    }

    jcenter()
    mavenCentral()
    maven { url "https://libraries.minecraft.net" }
    maven { url("https://jitpack.io") }
}

dependencies {
    minecraft "net.minecraftforge:forge:$forge_version"
    implementation "com.mojang:brigadier:$brigadier_version"
    implementation "com.mairwunnx.project_essentials_permissions:ProjectEssentials-Permissions:1.15.2-1.0.1"
    implementation "com.mairwunnx.project_essentials_cooldown:ProjectEssentials-Cooldown:1.15.2-1.0.1"
    internal "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
    internal "org.jetbrains.kotlin:kotlin-stdlib-$kotlin_jdk_version_target:$kotlin_version"
    internal "org.json:json:$json_version"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/libs/docs"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task modJar(type: Jar) {
    with tasks.jar
    from configurations.internal.collect { it.isDirectory() ? it : zipTree(it) }

    manifest {
        attributes([
            "Specification-Title"     : module_name,
            "Specification-Vendor"    : module_version,
            "Specification-Version"   : module_vendor,
            "Implementation-Title"    : module_name,
            "Implementation-Version"  : module_version,
            "Implementation-Vendor"   : module_vendor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    baseName = module_name + '-MOD'
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : module_name,
            "Specification-Vendor"    : module_vendor,
            "Specification-Version"   : module_version,
            "Implementation-Title"    : module_name,
            "Implementation-Version"  : module_version,
            "Implementation-Vendor"   : module_vendor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    baseName = module_name + '-API'
}

reobf {
    modJar {
        dependsOn jar
        mappings = createMcpToSrg.outputs.files.singleFile
    }
}

project.tasks["jar"].dependsOn project.tasks["dokka"]
project.tasks["modJar"].dependsOn project.tasks["jar"]

sourceCompatibility = targetCompatibility =
    compileJava.sourceCompatibility =
        compileJava.targetCompatibility = project_jvm_version_target

compileKotlin.kotlinOptions.jvmTarget =
    compileTestKotlin.kotlinOptions.jvmTarget = project_jvm_version_target

task dokkaJar(type: Jar) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Assembles Kotlin docs with Dokka"
    classifier = "javadoc"
    from tasks.dokka as Object
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri "https://maven.pkg.github.com/projectessentials/projectessentials-core"
            credentials {
                username = System.getenv("GradleUser")
                password = System.getenv("GradlePass")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact dokkaJar
        }
    }
}
